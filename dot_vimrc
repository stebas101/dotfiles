" plugins
let need_to_install_plugins = 0
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let need_to_install_plugins = 1
endif

call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'         "comment out lines with gcc
Plug 'tpope/vim-fugitive'           "Git wrapper
Plug 'tpope/vim-surround'
Plug 'airblade/vim-gitgutter'       "shows git diff in the sign column
Plug 'itchyny/lightline.vim'        "lightline Status Bar
Plug 'ap/vim-buftabline'            "Tab line - to use with lightline
" Plug 'vim-airline/vim-airline'      "Airline status bar
" Plug 'joshdick/onedark.vim'
Plug 'preservim/nerdtree'           "NerdTree file navigator
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jiangmiao/auto-pairs'
Plug 'dense-analysis/ale'           "checks syntax asyncronously
" Plug 'scrooloose/syntastic'         "alternative to ale
" Plug 'majutsushi/tagbar'
" Plug 'nathanaelkane/vim-indent-guides'
" Plug 'yggdroot/indentline'
Plug 'vim-scripts/indentpython.vim'
" Plug 'klen/python-mode'
Plug 'lepture/vim-jinja'
Plug 'pangloss/vim-javascript'      "javascript indentation and syntax support
Plug 'alvan/vim-closetag'           "closes html tags
Plug 'preservim/vim-markdown'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'ryanoasis/vim-devicons'
call plug#end()

filetype plugin indent on
syntax on

if need_to_install_plugins == 1
    echo "Installing plugins..."
    silent! PlugInstall
    echo "Done!"
    q
endif

" ------------
"  Appearance
" ------------

filetype plugin indent on
filetype on
syntax on
set laststatus=2    "always show the status bar
set t_Co=256        "enable 256 colors
set t_ut=
set number
colorscheme torte

" set updatetime=100
" set signcolumn

" -------------------
"  Files and Editing
" -------------------

set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8

set tabstop=4
set shiftwidth=4
set softtabstop=4
set colorcolumn=80
set expandtab
set viminfo='25,\"50,n~/.viminfo
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType css setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Auto-pairs
au FileType python let b:AutoPairs = AutoPairsDefine({
                \ "f'" : "'",
                \ "r'" : "'",
                \ "b'" : "'"
                \ })

" ------------
" key mappings
" ------------

" toggle relative numbering
nnoremap <silent><leader>r :set relativenumber!<CR>

" word movement
imap <S-Left> <Esc>bi
nmap <S-Left> b
imap <S-Right> <Esc><Right>wi
nmap <S-Right> w

" indent/unindent with tab/shift-tab
nnoremap <Tab> >>
nnoremap <S-tab> <<
inoremap <S-Tab> <Esc><<i
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" mouse
set mouse=a


" code folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" wrap toggle
setlocal nowrap
noremap <silent> <Leader>w :call ToggleWrap()<CR>
function ToggleWrap()
    if &wrap
        echo "Wrap OFF"
        setlocal nowrap
        set virtualedit=all
        silent! nunmap <buffer> <Up>
        silent! nunmap <buffer> <Down>
        silent! nunmap <buffer> <Home>
        silent! nunmap <buffer> <End>
        silent! iunmap <buffer> <Up>
        silent! iunmap <buffer> <Down>
        silent! iunmap <buffer> <Home>
        silent! iunmap <buffer> <End>
    else
        echo "Wrap ON"
        setlocal wrap linebreak nolist
        set virtualedit=
        setlocal display+=lastline
        noremap  <buffer> <silent> <Up>   gk
        noremap  <buffer> <silent> <Down> gj
        noremap  <buffer> <silent> <Home> g<Home>
        noremap  <buffer> <silent> <End>  g<End>
        inoremap <buffer> <silent> <Up>   <C-o>gk
        inoremap <buffer> <silent> <Down> <C-o>gj
        inoremap <buffer> <silent> <Home> <C-o>g<Home>
        inoremap <buffer> <silent> <End>  <C-o>g<End>
    endif
endfunction

" move through split windows
nmap <leader><Up> :wincmd k<CR>
nmap <leader><Down> :wincmd j<CR>
nmap <leader><Left> :wincmd h<CR>
nmap <leader><Right> :wincmd l<CR>

" move through buffers
nmap <leader>[ :bp!<CR>
nmap <leader>] :bn!<CR>
nmap <leader>x :bp<bar>bd#<CR>

" restore place in file from previous session
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" file browser
noremap <leader>n :NERDTreeToggle<CR>

" ale
noremap <C-e> <Plug>(ale_next_wrap)
noremap <C-r> <Plug>(ale_previous_wrap)

" tags
" map <leader>t :TagbarToggle<CR>

" copy, cut and paste
vmap <C-c> "*y
vmap <C-x> "*c
vmap <C-v> c<ESC>"*p
imap <C-v> <ESC>"*pa

" disable autoindent when pasting text
" source: https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

" -----------------
"  Plugin Settings
" -----------------

" lightline
set noshowmode
let g:lightline = { 'colorscheme': 'default' }

" NerdTree
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let NERDTreeMinimalUI = 1
let g:nerdtree_open = 0
